apply plugin: 'java'
apply plugin: 'jetty'
apply plugin: 'war'
apply plugin: 'idea'
apply plugin: 'sonar'
apply from: 'tasks.gradle'

processResources.dependsOn copyConfiguration

loadConfiguration()


jettyRun.httpPort = 1337
jettyStop.stopPort = 1337

def loadConfiguration() {
    def environment = hasProperty('env') ? env : 'dev'
    set 'environment', environment
}

repositories {
    mavenCentral()
}


buildscript {
    repositories {
        mavenCentral();
    }
}

sourceSets {
    functional {

        compileClasspath = sourceSets.main.output + configurations.testRuntime
        runtimeClasspath = output + sourceSets.main.output + configurations.testRuntime

        java {
            srcDir 'src/test/functional'
        }

        resources {
            srcDirs 'src/test/resources'
        }

    }
    integration {

        compileClasspath = sourceSets.main.output + configurations.testRuntime
        runtimeClasspath = output + sourceSets.main.output + configurations.testRuntime

        java {
            srcDirs 'src/test/integration'
        }
        resources {
            srcDirs 'src/main/resources'
        }
    }
}

dependencies {
    compile 'org.hibernate:hibernate-core:4.0.1.Final',
            'javax.servlet:servlet-api:2.5',
            'org.springframework:spring-core:3.1.1.RELEASE',
            'org.springframework:spring-webmvc:3.1.1.RELEASE',
            'org.springframework:spring-web:3.1.1.RELEASE',
            'commons-dbcp:commons-dbcp:1.4',
            'org.springframework:spring-orm:3.1.0.RELEASE',
            'com.h2database:h2:1.2.145',
            'cglib:cglib:2.2.2',
            'org.freemarker:freemarker:2.3+',
            'ch.qos.logback:logback-classic:1.0.0',
            'commons-lang:commons-lang:2.6',
            'commons-io:commons-io:2.3',
            'org.jasig.cas:cas-client-core:3.1.10',
            'hsqldb:hsqldb:1.8.0.10',
            'mysql:mysql-connector-java:5.1.18',
            'org.springframework.security:spring-security-core:3.1.0.RELEASE',
            'org.springframework.security:spring-security-cas:3.1.0.RELEASE',
            'org.springframework.security:spring-security-config:3.1.0.RELEASE',
            'org.springframework.security:spring-security-web:3.1.0.RELEASE',
            'org.projectlombok:lombok:0.11.0',
            'joda-time:joda-time:2.1',
            'postgresql:postgresql:9.1-901.jdbc4',
            'org.codehaus.jackson:jackson-mapper-asl:1.9.6',
            'net.sf.opencsv:opencsv:2.3'

    testCompile 'junit:junit:4.8.1',
            'org.springframework:spring-test:3.1.1.RELEASE',
            'org.mockito:mockito-all:1.9.0',
            'org.seleniumhq.selenium:selenium-firefox-driver:2.21.0',
            'org.seleniumhq.selenium:selenium-support:2.21.0'


}

task functional(type: Test) {

    testClassesDir = sourceSets.functional.output.classesDir
    classpath = sourceSets.functional.runtimeClasspath

    doFirst {
        jettyRun.stopKey = "selenium"
        jettyRun.daemon = true
        jettyRun.execute()
    }

    doLast {
        jettyStop.stopKey = "selenium"
        jettyStop.execute()
    }
}

task integration(type: Test) {

    testClassesDir = sourceSets.integration.output.classesDir
    classpath = sourceSets.integration.runtimeClasspath

}

sonar {
    server {
        url = "http://10.4.3.1:9000"
    }
    database {
        url = "jdbc:derby://10.4.3.1:1527/sonar"
        driverClassName = "org.apache.derby.jdbc.ClientDriver"
        username = 'sonar'
        password = 'sonar'
    }
    project {
        sourceDirs += sourceSets.functional.allSource.srcDirs
        sourceDirs += sourceSets.integration.allSource.srcDirs
    }
}
